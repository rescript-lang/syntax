
  Syntax error!
  tests/parsing/infiniteLoops/nonRecTypes.res:4:29-36

  2 ┆ include (
  3 ┆           {
  4 ┆             type t('value) = {
  5 ┆               mutable size: int,
  6 ┆               mutable root: option(node('value)),

  Type parameters require angle brackets:
  t<'value>


  Syntax error!
  tests/parsing/infiniteLoops/nonRecTypes.res:19:45-51

  17 ┆   ~size: int,
  18 ┆   ~root: option(node('value)),
  19 ┆   ~compare: Js.Internal.fn([ | `Arity_2('value, 'value)], int)
  20 ┆ ) =>
  21 ┆ t('value) =

  consecutive statements on a line must be separated by ';' or a newline


  Syntax error!
  tests/parsing/infiniteLoops/nonRecTypes.res:67:26-68:3

  65 │         };
  66 │ let has = (rbt, value) => _findNode(rbt, rootGet(rbt), value) !== None;
  67 │ let rec minNode = node =>
  68 │ let findMin = rbt =>
  69 │ let removeNode = (rbt, node) => {
  70 │   let nodeToRemove =

  I'm not sure what to parse here when looking at "let".


  Syntax error!
  tests/parsing/infiniteLoops/nonRecTypes.res:68:21-69:3

  66 │ let has = (rbt, value) => _findNode(rbt, rootGet(rbt), value) !== None;
  67 │ let rec minNode = node =>
  68 │ let findMin = rbt =>
  69 │ let removeNode = (rbt, node) => {
  70 │   let nodeToRemove =
  71 │     switch (leftGet(node), rightGet(node)) {

  I'm not sure what to parse here when looking at "let".


  Syntax error!
  tests/parsing/infiniteLoops/nonRecTypes.res:434:31-38

  432 │     updateSum(Some(node), ~delta);
  433 │   };
  434 │ type nonrec oldNewVisibleNodes('value) = {
  435 │   mutable old: array('value),
  436 │   mutable new_: array('value),

  Type parameters require angle brackets:
  oldNewVisibleNodes<'value>

include
  struct
    include
      struct
        type nonrec 'value t =
          {
          mutable size: int ;
          mutable root: 'value node option ;
          compare: [ [%rescript.typehole ]] Js.Internal.fn }
        ;;(({js|Arity_2('value, 'value)], int),
                      };
                    }: {

                    }
                  );
          type t('value);
          external t:
            (
              ~size: int,
              ~root: option(node('value)),
              ~compare: Js.Internal.fn([ | |js})
          [@res.template ])
        ;;Arity_2 (value, value)
        ;;int
        ;;(t value) = {js||js}
        ;;{js|BS:6.0.1\132\149\166\190\000\000\000#\000\000\000\r\000\000\000&\000\000\000#\145\160\160A\160$size@\160\160A\160$root@\160\160A\160'compare@@|js}
        external sizeSet : 'value t -> int -> unit = "size"
        ;;{js|BS:6.0.1\132\149\166\190\000\000\000\021\000\000\000\t\000\000\000\026\000\000\000\025\176\160\160A\145@\160\160A\004\003@E\151\160$size@|js}
        ;;[|(({js|use sizeGet instead or use {abstract = light} explicitly|js})
            [@ocaml.deprecated ])|]
        ;;[|((1)[@internal.arity ])|]
        external size : 'value t -> int = ""
        ;;{js|BS:6.0.1\132\149\166\190\000\000\000\016\000\000\000\007\000\000\000\020\000\000\000\019\176\160\160A\145@@A\152\160$size@|js}
        ;;[|((1)[@internal.arity ])|]
        external sizeGet : 'value t -> int = ""
        ;;{js|BS:6.0.1\132\149\166\190\000\000\000\016\000\000\000\007\000\000\000\020\000\000\000\019\176\160\160A\145@@A\152\160$size@|js}
        external rootSet : 'value t -> 'value node option -> unit = "root"
        ;;{js|BS:6.0.1\132\149\166\190\000\000\000\021\000\000\000\t\000\000\000\026\000\000\000\025\176\160\160A\145@\160\160A\004\003@E\151\160$root@|js}
        ;;[|(({js|use rootGet instead or use {abstract = light} explicitly|js})
            [@ocaml.deprecated ])|]
        ;;[|((1)[@internal.arity ])|]
        external root : 'value t -> 'value node option = ""
        ;;{js|BS:6.0.1\132\149\166\190\000\000\000\016\000\000\000\007\000\000\000\020\000\000\000\019\176\160\160A\145@@A\152\160$root@|js}
        ;;[|((1)[@internal.arity ])|]
        external rootGet : 'value t -> 'value node option = ""
        ;;{js|BS:6.0.1\132\149\166\190\000\000\000\016\000\000\000\007\000\000\000\020\000\000\000\019\176\160\160A\145@@A\152\160$root@|js}
        ;;[|(({js|use compareGet instead or use {abstract = light} explicitly|js})
            [@ocaml.deprecated ])|]
        ;;[|((1)[@internal.arity ])|]
        external compare :
          'value t -> [ [%rescript.typehole ]] Js.Internal.fn
        ;;(({js|Arity_2('value, 'value)], int) =
            ""
            "BS:6.0.1\132\149\166\190\000\000\000\019\000\000\000\007\000\000\000\020\000\000\000\019\176\160\160A\145@@A\152\160'compare@";
          [@internal.arity 1]
          external compareGet:
            t('value) => Js.Internal.fn([ | |js})
          [@res.template ])
        ;;Arity_2 (value, value)
        ;;int
        ;;{js||js}
        ;;{js|BS:6.0.1\132\149\166\190\000\000\000\019\000\000\000\007\000\000\000\020\000\000\000\019\176\160\160A\145@@A\152\160'compare@|js}
      end
    let has rbt value = (_findNode rbt (rootGet rbt) value) != None
    let rec minNode node = [%rescript.exprhole ]
    let findMin rbt = [%rescript.exprhole ]
    let removeNode rbt node =
      ((let nodeToRemove =
          match ((leftGet node), (rightGet node)) with
          | (Some _, Some _) ->
              let successor = castNotOption (minNode (rightGet node)) in
              (valueSet node (valueGet successor);
               heightSet node (heightGet successor);
               successor)
          | _ -> node in
        let successor =
          match leftGet nodeToRemove with
          | None -> rightGet nodeToRemove
          | left -> left in
        let (successor, isLeaf) =
          match successor with
          | None ->
              let leaf =
                createNode ~value:((Js.Internal.raw_expr {js|0|js})
                  [@ns.namedArgLoc ]) ~color:((Black)[@ns.namedArgLoc ])
                  ~height:((0.)[@ns.namedArgLoc ]) in
              let isLeaf = Js.Internal.fn_mk1 (fun x -> x == leaf) in
              (leaf, isLeaf)
          | Some successor ->
              (successor, (Js.Internal.fn_mk1 (fun _ -> false))) in
        let nodeParent = parentGet nodeToRemove in
        parentSet successor nodeParent;
        (match nodeParent with
         | None -> ()
         | Some parent ->
             leftOrRightSet parent ~node:((nodeToRemove)[@ns.namedArgLoc ])
               (Some successor));
        updateSumRecursive rbt successor;
        if (colorGet nodeToRemove) == Black
        then
          (if (colorGet successor) == Red
           then
             (colorSet successor Black;
              if (parentGet successor) == None
              then rootSet rbt (Some successor))
           else
             (let break = ref false in
              let successorRef = ref successor in
              while not break.contents do
                let successor = successorRef.contents in
                match parentGet successor with
                | None ->
                    (rootSet rbt (Some successor); break.contents <- true)
                | Some successorParent ->
                    let sibling = siblingOf successor in
                    (if
                       (sibling != None) &&
                         ((colorGet (castNotOption sibling)) == Red)
                     then
                       (colorSet successorParent Red;
                        colorSet (castNotOption sibling) Black;
                        if isLeft successor
                        then rotateLeft rbt successorParent
                        else rotateRight rbt successorParent);
                     (let sibling = siblingOf successor in
                      let siblingNN = castNotOption sibling in
                      if
                        ((colorGet successorParent) == Black) &&
                          ((sibling == None) ||
                             ((((colorGet siblingNN) == Black) &&
                                 (((leftGet siblingNN) == None) ||
                                    ((colorGet
                                        (castNotOption (leftGet siblingNN)))
                                       == Black)))
                                &&
                                (((rightGet siblingNN) == None) ||
                                   ((colorGet
                                       (castNotOption (rightGet siblingNN)))
                                      == Black))))
                      then
                        (if sibling != None then colorSet siblingNN Red;
                         successorRef.contents <- successorParent)
                      else
                        if
                          ((colorGet successorParent) == Red) &&
                            ((sibling == None) ||
                               ((((colorGet siblingNN) == Black) &&
                                   (((leftGet siblingNN) == None) ||
                                      ((colorGet
                                          (castNotOption (leftGet siblingNN)))
                                         == Black)))
                                  &&
                                  (((rightGet siblingNN) == None) ||
                                     ((colorGet
                                         (castNotOption (rightGet siblingNN)))
                                        == Black))))
                        then
                          (if sibling != None then colorSet siblingNN Red;
                           colorSet successorParent Black;
                           break.contents <- true)
                        else
                          if
                            (sibling != None) &&
                              ((colorGet (castNotOption sibling)) == Black)
                          then
                            (let sibling = castNotOption sibling in
                             if
                               (((isLeft successor) &&
                                   (((rightGet sibling) == None) ||
                                      ((colorGet
                                          (castNotOption (rightGet sibling)))
                                         == Black)))
                                  && ((leftGet sibling) != None))
                                 &&
                                 ((colorGet (castNotOption (leftGet sibling)))
                                    == Red)
                             then
                               (colorSet sibling Red;
                                colorSet (castNotOption (leftGet sibling))
                                  Black;
                                rotateRight rbt sibling)
                             else
                               if
                                 (((not (isLeft successor)) &&
                                     (((leftGet sibling) == None) ||
                                        ((colorGet
                                            (castNotOption (leftGet sibling)))
                                           == Black)))
                                    && ((rightGet sibling) != None))
                                   &&
                                   ((colorGet
                                       (castNotOption (rightGet sibling)))
                                      == Red)
                               then
                                 (colorSet sibling Red;
                                  colorSet (castNotOption (rightGet sibling))
                                    Black;
                                  rotateLeft rbt sibling);
                             break.contents <- true)
                          else
                            (let sibling = siblingOf successor in
                             let sibling = castNotOption sibling in
                             colorSet sibling (colorGet successorParent);
                             if isLeft successor
                             then
                               (colorSet (castNotOption (rightGet sibling))
                                  Black;
                                rotateRight rbt successorParent)
                             else
                               (colorSet (castNotOption (leftGet sibling))
                                  Black;
                                rotateLeft rbt successorParent))))
                done));
        if Js.Internal.fn_run1 isLeaf successor
        then
          (if (rootGet rbt) == (Some successor) then rootSet rbt None;
           (match parentGet successor with
            | None -> ()
            | Some parent ->
                leftOrRightSet parent ~node:((successor)[@ns.namedArgLoc ])
                  None)))
      [@ns.braces ])
    let remove rbt value =
      match _findNode rbt (rootGet rbt) value with
      | Some node ->
          (removeNode rbt node;
           sizeSet rbt ((sizeGet rbt) - 1);
           Some (heightGet node))
      | None -> None
    let findThroughCallback rbt cb =
      ((let rec findThroughCallback rbt node cb =
          match node with
          | None -> None
          | Some node ->
              let cmp = Js.Internal.fn_run1 cb (valueGet node) in
              if cmp == 0
              then Some node
              else
                if cmp < 0
                then findThroughCallback rbt (leftGet node) cb
                else findThroughCallback rbt (rightGet node) cb in
        match findThroughCallback rbt (rootGet rbt) cb with
        | None -> None
        | Some node -> Some (valueGet node))
      [@ns.braces ])
    let make ~compare:((compare)[@ns.namedArgLoc ])  =
      t ~size:((0)[@ns.namedArgLoc ]) ~root:((None)[@ns.namedArgLoc ])
        ~compare:((compare)[@ns.namedArgLoc ])
    let rec heightOfInterval rbt node lhs rhs =
      match node with
      | None -> 0.
      | Some n ->
          if (lhs == None) && (rhs == None)
          then sumGet n
          else
            if
              (lhs != None) &&
                ((Js.Internal.fn_run2 (compareGet rbt) (valueGet n)
                    (castNotOption lhs))
                   < 0)
            then heightOfInterval rbt (rightGet n) lhs rhs
            else
              if
                (rhs != None) &&
                  ((Js.Internal.fn_run2 (compareGet rbt) (valueGet n)
                      (castNotOption rhs))
                     > 0)
              then heightOfInterval rbt (leftGet n) lhs rhs
              else
                ((heightGet n) +. (heightOfInterval rbt (leftGet n) lhs None))
                  +. (heightOfInterval rbt (rightGet n) None rhs)
    let heightOfInterval rbt lhs rhs =
      heightOfInterval rbt (rootGet rbt) lhs rhs
    let rec firstVisibleNode node offset =
      match node with
      | None -> None
      | Some node ->
          if (sumGet node) <= offset
          then None
          else
            (let nodeHeight = heightGet node in
             let sumLeft =
               match leftGet node with
               | None -> 0.0
               | Some left -> sumGet left in
             if sumLeft > offset
             then firstVisibleNode (leftGet node) offset
             else
               if (sumLeft +. nodeHeight) > offset
               then Some node
               else
                 firstVisibleNode (rightGet node)
                   (offset -. (sumLeft +. nodeHeight)))
    let lastVisibleNode node offset =
      match firstVisibleNode node offset with
      | None -> maxNode node
      | first -> first
    let firstVisible rbt ~offset:((offset)[@ns.namedArgLoc ])  =
      match firstVisibleNode (rootGet rbt) offset with
      | None -> None
      | Some node -> Some (valueGet node)
    let rec leftmost node =
      match leftGet node with | None -> node | Some node -> leftmost node
    let rec firstRightParent node =
      match parentGet node with
      | None -> None
      | Some parent ->
          if isLeft node then Some parent else firstRightParent parent
    let nextNode node =
      match rightGet node with
      | None -> firstRightParent node
      | Some right -> Some (leftmost right)
    let rec sumLeftSpine node
      ~fromRightChild:((fromRightChild)[@ns.namedArgLoc ])  =
      ((let leftSpine =
          match leftGet node with
          | None -> heightGet node
          | Some left ->
              if fromRightChild
              then (heightGet node) +. (sumGet left)
              else 0.0 in
        match parentGet node with
        | None -> leftSpine
        | Some parent ->
            leftSpine +.
              (sumLeftSpine parent
                 ~fromRightChild:(((rightGet parent) == (Some node))
                 [@ns.namedArgLoc ])))
      [@ns.braces ])
    let getY node =
      (sumLeftSpine node ~fromRightChild:((true)[@ns.namedArgLoc ])) -.
        (heightGet node)
    let linearSearch rbt callback =
      ((let rec find node callback =
          if Js.Internal.fn_run1 callback (valueGet node)
          then Some (valueGet node)
          else
            (match nextNode node with
             | None -> None
             | Some node -> find node callback) in
        match minNode (rootGet rbt) with
        | None -> None
        | Some node -> find node callback)
      [@ns.braces ])
    let rec iterate ~inclusive:((inclusive)[@ns.namedArgLoc ])  firstNode
      lastNode ~callback:((callback)[@ns.namedArgLoc ])  =
      match firstNode with
      | None -> ()
      | Some node ->
          (if inclusive then Js.Internal.fn_run1 callback node;
           if firstNode != lastNode
           then
             (if not inclusive then Js.Internal.fn_run1 callback node;
              iterate ~inclusive:((inclusive)[@ns.namedArgLoc ])
                (nextNode node) lastNode ~callback:((callback)
                [@ns.namedArgLoc ])))
    let rec iterateWithY ?y:((y)[@ns.namedArgLoc ]) 
      ~inclusive:((inclusive)[@ns.namedArgLoc ])  firstNode lastNode
      ~callback:((callback)[@ns.namedArgLoc ])  =
      match firstNode with
      | None -> ()
      | Some node ->
          let y = match y with | None -> getY node | Some y -> y in
          (if inclusive then Js.Internal.fn_run2 callback node y;
           if firstNode != lastNode
           then
             (if not inclusive then Js.Internal.fn_run2 callback node y;
              iterateWithY ~y:((y +. (heightGet node))[@ns.namedArgLoc ])
                ~inclusive:((inclusive)[@ns.namedArgLoc ]) (nextNode node)
                lastNode ~callback:((callback)[@ns.namedArgLoc ])))
    let rec updateSum node ~delta:((delta)[@ns.namedArgLoc ])  =
      match node with
      | None -> ()
      | Some node ->
          (sumSet node ((sumGet node) +. delta);
           updateSum (parentGet node) ~delta:((delta)[@ns.namedArgLoc ]))
    let setHeight rbt value ~height:((height)[@ns.namedArgLoc ])  =
      match _findNode rbt (rootGet rbt) value with
      | None -> ()
      | Some node ->
          let delta = height -. (heightGet node) in
          (heightSet node height;
           updateSum (Some node) ~delta:((delta)[@ns.namedArgLoc ]))
    type nonrec 'value oldNewVisibleNodes =
      {
      mutable old: 'value array ;
      mutable new_: 'value array }
  end