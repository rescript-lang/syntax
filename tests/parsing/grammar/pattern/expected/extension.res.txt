let [%patternExtension ] = ()
let [%pattern.extension ] = ()
let [%bs.raw {js|x|js}] = ()
let ([%bs.raw {js|x|js}] : unit) = ()
let [%bs.raw {js|x|js}] as y = ()
let [%patExt1 ]|[%patExt2 ] = ()
;;match x with
  | [%patternExtension ] -> ()
  | [%pattern.extension ] -> ()
  | [%pat.stuff test] -> ()
  | [%pat.stuff test] as _x -> ()
  | ([%pat.stuff test] : unit) -> ()
  | [%patExt1 ]|[%patExt2 ] -> ()
let f [%patternExtension ] = ()
let f [%pattern.extension ] = ()
let f [%bs.raw {js|x|js}] = ()
let f [%bs.raw {js|x|js}] [%bs.raw {js|y|js}] = ()
let f ([%bs.raw {js|x|js}] as _y) = ()
let f ([%bs.raw {js|x|js}] : unit) = ()
let f ([%patExt1 ]|[%patExt2 ]) = ()
;;for [%ext ] = x to y do () done
;;for [%ext1 ]|[%ext2 ] = x to y do () done
;;for [%ext ] = x to y do () done
;;for [%ext ] as e = x to y do () done
;;for [%ext.pattern ] = x to y do () done
;;for [%ext.pattern ] as e = x to y do () done
;;for [%ext.pattern ] = x to y do () done
;;for [%ext.pattern ] as e = x to y do () done
;;for [%ext.pattern payload] = x to y do () done
;;for [%ext.pattern payload] as e = x to y do () done
;;for [%ext.pattern payload] = x to y do () done
;;for [%ext.pattern payload] as e = x to y do () done
;;for [%ext.pattern payload] as e|[%ext2 ] as bar = x to y do () done