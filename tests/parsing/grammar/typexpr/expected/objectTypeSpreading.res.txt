type nonrec a = < x: int   > 
type nonrec u = < a ;u: int   > 
type nonrec v = < v: int  ;a  > 
type nonrec w = < j: int  ;a ;k: int  ;v  > 
type nonrec t = < a ;u: int   >  as 'a
type nonrec t = < a ;u: int   >  -> unit
type nonrec t = (< a ;u: int   >  as 'a) -> unit
type nonrec t = < a ;u: int   >  -> < a ;v: int   >  -> unit
type nonrec user = < name: string   > 
let (steve : < user ;age: int   > ) =
  [%obj { name = {js|Steve|js}; age = 30 }]
let steve =
  ([%obj { name = {js|Steve|js}; age = 30 }] : < user ;age: int   > )
let steve =
  ((([%obj { name = {js|Steve|js}; age = 30 }] : < user ;age: int   > ))
  [@ns.braces ])
let printFullUser (steve : < user ;age: int   > ) = Js.log steve
let printFullUser ~user:(((user : < user ;age: int   > ))[@ns.namedArgLoc ]) 
  = Js.log steve
let printFullUser ~user:(((user : < user ;age: int   > ))[@ns.namedArgLoc ]) 
  = Js.log steve
let printFullUser ?user:(((user)[@ns.namedArgLoc ])=
  (steve : < user ;age: int   > ))  = Js.log steve
external steve : < user ;age: int   >  = "steve"[@@val ]
let makeCeoOf30yearsOld name =
  ([%obj { name; age = 30 }] : < user ;age: int   > )
type nonrec optionalUser = < user ;age: int   >  option
type nonrec optionalTupleUser =
  (< user ;age: int   >  * < user ;age: int   > ) option
type nonrec constrUser =
  (< user ;age: int   > , < user ;age: int   > ) myTypeConstructor
type nonrec taggedUser =
  | User of < user ;age: int   >  
  | Ceo of < user ;age: int  ;direction: bool   >  *
  < salary ;taxFraud: bool   >  
type nonrec polyTaggedUser = [ `User of < user ;age: int   >  ]
type nonrec polyTaggedUser2 =
  [ `User of < user ;age: int   >  
  | `Ceo of
      (< user ;age: int  ;direction: bool   >  *
        < salary ;taxFraud: bool   > )
      ]