let x = 1
let f = 1.3
let truth = true
let truth = false
let constructor = None
let longidentConstructor = Option.None
let txt = {js|a string|js}
let otherTxt =
  (((((({js|foo bar |js})[@res.template ]) ^ txt)[@res.template ]) ^
      (({js||js})[@res.template ]))
  [@res.template ])
let ident = myIdent
let aList = [1; 2]
let anArray = [|1;2|]
let aTuple = (1, 2)
let aRecord = { name = {js|steve|js}; age = 30 }
let blockExpression = ((let a = 1 in let b = 2 in a + b)[@ns.braces ])
let assertSmthing = assert true
let lazyThing = lazy true
let jsx =
  ((div ~className:(({js|cx|js})[@ns.namedArgLoc ]) ~children:[foo] ())
  [@JSX ])
let ifExpr = if true then Js.log true else Js.log false
let forExpr = for p = 0 to 10 do () done
let whileExpr = while true do doSomeImperativeThing () done
let switchExpr = match myVar with | Blue -> {js|blue|js} | Red -> {js|red|js}
let constrainedExpr = (x : int)