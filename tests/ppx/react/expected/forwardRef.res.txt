@@jsxConfig({version: 3})

module FancyInput = {
  @obj
  external makeProps: (
    ~className: 'className=?,
    ~children: 'children,
    ~key: string=?,
    ~ref: 'ref=?,
    unit,
  ) => {"className": option<'className>, "children": 'children} = ""

  let make =
    (@warning("-16") ~className=?, @warning("-16") ~children) =>
      @warning("-16")
      ref =>
        ReactDOMRe.createDOMElementVariadic(
          "div",
          [
            ReactDOMRe.createDOMElementVariadic(
              "input",
              ~props=ReactDOMRe.domProps(
                ~type_="text",
                ~className?,
                ~ref=?{Js.Nullable.toOption(ref)->Belt.Option.map(ReactDOM.Ref.domRef)},
                (),
              ),
              [],
            ),
            children,
          ],
        )
  let make = React.forwardRef({
    let \"ForwardRef$FancyInput" = (
      \"Props": {"className": option<'className>, "children": 'children},
      ref,
    ) => make(~children=\"Props"["children"], ~className=?\"Props"["className"], ref)
    \"ForwardRef$FancyInput"
  })
}
@obj external makeProps: (~key: string=?, unit) => {.} = ""

let make = () => {
  let input = React.useRef(Js.Nullable.null)

  ReactDOMRe.createDOMElementVariadic(
    "div",
    [
      React.createElement(
        FancyInput.make,
        FancyInput.makeProps(~ref=input, ~children={React.string("Click to focus")}, ()),
      ),
    ],
  )
}
let make = {
  let \"ForwardRef" = (\"Props": {.}) => make()
  \"ForwardRef"
}

@@jsxConfig({version: 4, mode: "classic"})

module FancyInput = {
  type props<'className, 'children> = {
    key?: string,
    className?: 'className,
    children: 'children,
    ref?: ReactDOM.Ref.currentDomRef,
  }

  let make = ({?className, children, ?ref, _}: props<option<'className>, 'children>) => {
    let ref = Js.Nullable.fromOption(ref)
    let _ = ref

    ReactDOMRe.createDOMElementVariadic(
      "div",
      [
        ReactDOMRe.createDOMElementVariadic(
          "input",
          ~props=ReactDOMRe.domProps(
            ~type_="text",
            ~className?,
            ~ref=?{Js.Nullable.toOption(ref)->Belt.Option.map(ReactDOM.Ref.domRef)},
            (),
          ),
          [],
        ),
        children,
      ],
    )
  }
  let make = React.forwardRef({
    let \"ForwardRef$FancyInput" = (props: props<_>, ref) =>
      make({...props, ref: ?Js.Nullable.toOption(ref)})
    \"ForwardRef$FancyInput"
  })
}
type props = {key?: string}

let make = (_: props) => {
  let input = React.useRef(Js.Nullable.null)

  ReactDOMRe.createDOMElementVariadic(
    "div",
    [
      React.createElement(
        FancyInput.make,
        {ref: input, children: {React.string("Click to focus")}},
      ),
    ],
  )
}
let make = {
  let \"ForwardRef" = props => make(props)
  \"ForwardRef"
}

@@jsxConfig({version: 4, mode: "automatic"})

module FancyInput = {
  type props<'className, 'children> = {
    key?: string,
    className?: 'className,
    children: 'children,
    ref?: ReactDOM.Ref.currentDomRef,
  }

  let make = ({?className, children, ?ref, _}: props<option<'className>, 'children>) => {
    let ref = Js.Nullable.fromOption(ref)
    let _ = ref

    ReactDOM.jsxs(
      "div",
      {
        children: React.array([
          ReactDOM.jsx(
            "input",
            {
              type_: "text",
              ?className,
              ref: ?Js.Nullable.toOption(ref)->Belt.Option.map(ReactDOM.Ref.domRef),
            },
          ),
          children,
        ]),
      },
    )
  }
  let make = React.forwardRef({
    let \"ForwardRef$FancyInput" = (props: props<_>, ref) =>
      make({...props, ref: ?Js.Nullable.toOption(ref)})
    \"ForwardRef$FancyInput"
  })
}
type props = {key?: string}

let make = (_: props) => {
  let input = React.useRef(Js.Nullable.null)

  ReactDOM.jsx(
    "div",
    {
      children: React.jsx(
        FancyInput.make,
        {ref: input, children: {React.string("Click to focus")}},
      ),
    },
  )
}
let make = {
  let \"ForwardRef" = props => make(props)
  \"ForwardRef"
}
