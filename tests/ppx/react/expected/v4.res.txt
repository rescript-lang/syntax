type props<'x, 'y> = {x: 'x, y: 'y} // Component with type constraint
@react.component let make = ({x, y, _}: props<string, string>) => React.string(x ++ y)
let make = {
  let \"V4" = (props: props<_>) => make(props)
  \"V4"
}

module AnotherName = {
  type // Component with another name than "make"
  props<'x> = {x: 'x}

  @react.component let anotherName = ({x, _}: props<'x>) => React.string(x)
  let anotherName = {
    let \"V4$AnotherName$anotherName" = (props: props<_>) => anotherName(props)

    \"V4$AnotherName$anotherName"
  }
}

module Rec = {
  type props = {}

  let rec make = {
    @merlin.focus
    let rec \"make$Internal" = (_: props) => {
      make(({}: props))
    }
    and make = {
      let \"V4$Rec" = props => make(props)

      \"V4$Rec"
    }
    make
  }
}
